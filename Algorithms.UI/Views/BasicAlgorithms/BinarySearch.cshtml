@{
    ViewBag.Title = "Wyszukiwanie binarne";
}

<script>
    function getResults() {
        var array = getArray();
        var element = getElementToFind();

        if (!isNaN(element)) {
            $.ajax({
                method: "POST",
                url: "/BasicAlgorithms/BinarySearch?values=" + array + "&element=" + element,
                success: function (results) {
                    $("#resultsContainer").html(results);
                }
            });
        }
        else {
            $("#resultsContainer").html('<div class="alert alert-danger">Podano niepoprawne dane.</div>');
        }
    }

    function getArray() {
        return $("#array").val();
    }

    function getElementToFind() {
        var element = $("#element").val();
        return parseInt(element);
    }
</script>

<h2>Wyszukiwanie binarne</h2>
<h3>Idea</h3>
<p>
    Dość często mamy do czynienia z uporządkowanymi danymi. Przeszukiwanie ich po kolei,
    już na pierwszy rzut oka wydaje się niepotrzebne. Poniżej pokażę algorytm, który dla tablicy
    o długości <span class="math">1 000 000</span> wykona w pesymistycznym przypadku nie milion,
    a dwadzieścia porównań!
</p>
<p>
    Algorytm działa w czasie logarytmicznym. Schemat jego działania jest bardzo prosty: sprawdzamy
    środkowy element kolekcji. Jeśli trafiliśmy, kończymy działanie. Jeśli szukany element jest mniejszy
    od środkowego elementu kolekcji, zawężamy poszukiwanie do lewej części tablicy. Jeśli jest większy,
    zaglądamy do prawej części. Postępujemy tak dopóki, dopóty nie znajdziemy szukanego elementu, lub jeśli nie
    będziemy mogli już bardziej zawężyć obszaru poszukiwań.
</p>

<h3>Kod źródłowy</h3>
<pre>
public int BinarySearch&lt;T&gt;(T[] input, T element) where T : IComparable
{
    var left = 0;
    var right = input.Length - 1;

    while (left &lt;= right)
    {
        var mid = (left + right) / 2;

        if (element.Equals(input[mid]))
        {
            return mid;
        }

        if (element.CompareTo(input[mid]) &lt; 0)
        {
            right = mid - 1;
        }
        else
        {
            left = mid + 1;
        }
    }

    return -1;
}
</pre>

<h3>Spróbuj!</h3>
<div>
    <p>Podaj liczby rozdzielone spacjami:</p>
    <div class="form-group" style="margin-left: 0;">
        @Html.TextBox("array", "", htmlAttributes: new { placeholder = "1 3 5 7 8 9", @class = "form-control", id = "array" })
    </div>
    <p>Podaj element do wyszukania:</p>
    <div class="form-group" style="margin-left: 0;">
        @Html.TextBox("element", "", htmlAttributes: new { placeholder = "7", @class = "form-control", id = "element" })
    </div>
    <button onclick="getResults()" class="btn btn-primary">Znajdź</button>
    <br /><br />
    <div id="resultsContainer"></div>
</div>
